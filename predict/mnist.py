import tensorflow as tf
from tensorflow.contrib.layers.python.layers import batch_norm
import name_read_train as readtf
import numpy as np

def weight_variable(shape):
    inite = tf.truncated_normal(shape=shape, stddev=0.1)
    return tf.Variable(inite)
def bias_variable(shape):
    inite = tf.constant(0.1, shape=shape)
    return tf.Variable(inite)
def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding="SAME")
def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
def batch_norm_layer(value, train=None, name='batch_norm'):
    if train is not None:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=True)
    else:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=False)

filenames = ["train80_gist_eight_train.tfrecords"]
verfiles = ["train80_gist_two_test.tfrecords"]

x = tf.placeholder(tf.float32, [None, 512])
y_ = tf.placeholder(tf.float32, [None, 9])
train = tf.placeholder(tf.int64)
keep_prob = tf.placeholder(tf.float32)
x_image = tf.reshape(x, [-1, 32, 16, 1])

W_conv1 = weight_variable([5,5,1,32])
b_conv1 = bias_variable([32])
h_conv1 = tf.nn.relu(batch_norm_layer(value=(conv2d(x_image, W_conv1) + b_conv1), train=train))
h_pool1 = max_pool_2x2(h_conv1)

W_conv2_5x5 = weight_variable([5, 5, 32, 32])
b_conv2_5x5 = bias_variable([32])
h_conv2_5x5 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_5x5) + b_conv2_5x5), train=train))
W_conv2_7x7 = weight_variable([3, 3, 32, 32])
b_conv2_7x7 = bias_variable([32])
h_conv2_7x7 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_7x7) + b_conv2_7x7), train=train))
h_conv2 = tf.concat([h_conv2_5x5, h_conv2_7x7], 3)
h_pool2 = max_pool_2x2(h_conv2)

W_fc1 = weight_variable([8*4*64, 1024])
b_fc1 = bias_variable([1024])
h_pool3_flat = tf.reshape(h_pool2, [-1, 8*4*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool3_flat, W_fc1) + b_fc1)
h_fc1_drop = tf.nn.dropout(h_fc1, rate=1 - keep_prob)

W_fc2 = weight_variable([1024,9])
b_fc2 = bias_variable([9])
y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2
tf.summary.histogram('y_conv', y_conv)

global_step = tf.Variable(0, trainable=False)
decaylearning_rate = tf.train.exponential_decay(0.0001, global_step, 1000, 0.9)
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=y_conv))
train_step = tf.train.AdamOptimizer(decaylearning_rate).minimize(cross_entropy, global_step=global_step)
tf.summary.scalar('loss_function', cross_entropy)

correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
tf.summary.histogram('accuracy', accuracy)

sess =tf.InteractiveSession()
sess.run(tf.global_variables_initializer())

sever = tf.train.Saver(max_to_keep=1)
savedir = "log/"

merged_summary_op = tf.summary.merge_all()
summary_writer = tf.summary.FileWriter('log/mnist_with_summaries', sess.graph)


kpt = tf.train.latest_checkpoint(savedir)
if kpt != None:
    sever.restore(sess, kpt)

for i in range(2000):
    batch_name, batch_x, batch_y = sess.run(readtf.get_train_data(filenames, 128))
    batch_x = np.reshape(batch_x, newshape=[-1, 512])
    label = np.array(np.eye(9)[batch_y[0]])
    label = np.reshape(label, [-1, 9])
    for j in range(1, len(batch_y)):
        temp = np.array(np.eye(9)[batch_y[j]])
        label = np.row_stack((label, temp))
    sess.run(train_step, feed_dict={x:batch_x, y_:label, train:1, keep_prob:0.95})
    summary_str = sess.run(merged_summary_op, feed_dict={x: batch_x, y_: label, keep_prob: 0.95, train:1})
    summary_writer.add_summary(summary_str, i)
    loss, train_accuracy = sess.run((cross_entropy, accuracy), feed_dict={x:batch_x, y_:label, keep_prob:0.95})
    print("step %d, training accuracy : %g, loss : %g" % (sess.run(global_step), train_accuracy, loss))

    if i % 100 == 0:
        test_name, test_x, test_y = sess.run(readtf.get_train_data(verfiles, 2174))
        test_x = np.reshape(test_x, newshape=[-1, 512])
        tlabel = np.array(np.eye(9)[test_y[0]])
        tlabel = np.reshape(tlabel, [-1, 9])
        for j in range(1, len(test_y)):
            temp = np.array(np.eye(9)[test_y[j]])
            tlabel = np.row_stack((tlabel, temp))
        loss, train_accuracy = sess.run((cross_entropy, accuracy), feed_dict={x:test_x, y_:tlabel, keep_prob:1})
        print("testing accuracy : %g, loss : %g" % (train_accuracy, loss))
    sever.save(sess, save_path=savedir + 'malware200.cpkt', global_step=global_step)
