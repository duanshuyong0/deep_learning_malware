import tensorflow as tf
import numpy as np
def _parse_function(example_proto):
    features = {'label': tf.FixedLenFeature([], tf.int64),
                'image': tf.FixedLenFeature([], tf.string),
                'pic_name':tf.FixedLenFeature([], tf.string)}
    parsed_features = tf.parse_single_example(example_proto, features)
    img = tf.decode_raw(parsed_features['image'], tf.float64)
    #img = tf.reshape(img, [1, 512, 1])
    label = tf.cast(parsed_features['label'], tf.int64)
    pic_name = parsed_features['pic_name']
    return pic_name, img, label

def get_train_data(filenames, n):
    dataset = tf.data.TFRecordDataset(filenames)
    dataset = dataset.map(_parse_function)
    dataset = dataset.shuffle(11000).batch(n).repeat()
    iterator = dataset.make_one_shot_iterator()
    next_element = iterator.get_next()
    return next_element
def get_data_onehot(filenames, n):
    sess = tf.Session()
    sess.run(tf.global_variables_initializer())
    batch_x, batch_y = get_train_data(filenames, n)
    batch_x = np.reshape(batch_x, newshape=[-1, 640000])
    batch_y[0] -= 1
    label = np.array(np.eye(9)[batch_y[0] - 1])
    label = np.reshape(label, [-1, 9])
    for j in range(1, len(batch_y)):
        batch_y[j] -= 1
        temp = np.array(np.eye(9)[batch_y[j] - 1])
        label = np.row_stack((label, temp))
    sess.close()
    return batch_x, label
'''
with tf.Session() as sess:
    filenames = [r"J:\恶意代码\train80_gist_test.tfrecords"]
    for i in range(2):
        pic_name, image, label = sess.run(get_train_data(filenames, 1))
        print(pic_name)
        print(image.shape)
        print(label)


filenames = [r'J:\恶意代码\train.tfrecords']
with tf.Session() as sess:
    batch_x, batch_y = sess.run(get_train_data(filenames, 10))
    batch_x = np.reshape(batch_x, newshape=[-1, 3896192])
    batch_y[0] -= 1
    label = np.array(np.eye(9)[batch_y[0] - 1])
    label = np.reshape(label, [-1, 9])
    for j in range(1, len(batch_y)):
        batch_y[j] -= 1
        temp = np.array(np.eye(9)[batch_y[j] - 1])
        label = np.row_stack((label, temp))
    print(batch_y)
    print(label.shape)
    print(label)
'''