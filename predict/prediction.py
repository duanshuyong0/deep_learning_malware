import tensorflow as tf
from tensorflow.contrib.layers.python.layers import batch_norm
import name_read_train as readtf
import numpy as np

def weight_variable(shape):
    inite = tf.truncated_normal(shape=shape, stddev=0.1)
    return tf.Variable(inite)
def bias_variable(shape):
    inite = tf.constant(0.1, shape=shape)
    return tf.Variable(inite)
def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding="SAME")
def max_pool_2x2(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')
def batch_norm_layer(value, train=None, name='batch_norm'):
    if train is not None:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=True)
    else:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=False)

#filenames = ["train80_gist_train.tfrecords"]
verfiles = ["train80_gist_eight_train.tfrecords"]

x = tf.placeholder(tf.float32, [None, 512])
y_ = tf.placeholder(tf.float32, [None, 9])
train = tf.placeholder(tf.int64)
keep_prob = tf.placeholder(tf.float32)
x_image = tf.reshape(x, [-1, 32, 16, 1])

W_conv1 = weight_variable([5,5,1,32])
b_conv1 = bias_variable([32])
h_conv1 = tf.nn.relu(batch_norm_layer(value=(conv2d(x_image, W_conv1) + b_conv1), train=train))
h_pool1 = max_pool_2x2(h_conv1)

W_conv2_5x5 = weight_variable([5, 5, 32, 32])
b_conv2_5x5 = bias_variable([32])
h_conv2_5x5 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_5x5) + b_conv2_5x5), train=train))
W_conv2_7x7 = weight_variable([3, 3, 32, 32])
b_conv2_7x7 = bias_variable([32])
h_conv2_7x7 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_7x7) + b_conv2_7x7), train=train))
h_conv2 = tf.concat([h_conv2_5x5, h_conv2_7x7], 3)
h_pool2 = max_pool_2x2(h_conv2)

W_fc1 = weight_variable([8*4*64, 1024])
b_fc1 = bias_variable([1024])
h_pool3_flat = tf.reshape(h_pool2, [-1, 8*4*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool3_flat, W_fc1) + b_fc1)
h_fc1_drop = tf.nn.dropout(h_fc1, rate= 1 - keep_prob)

W_fc2 = weight_variable([1024,9])
b_fc2 = bias_variable([9])
y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2

pre = tf.argmax(y_conv, 1)

global_step = tf.Variable(0, trainable=False)
decaylearning_rate = tf.train.exponential_decay(0.001, global_step, 1000, 0.9)
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=y_conv))
train_step = tf.train.AdamOptimizer(decaylearning_rate).minimize(cross_entropy, global_step=global_step)

correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

sess =tf.InteractiveSession()
sess.run(tf.global_variables_initializer())

sever = tf.train.Saver(max_to_keep=1)
savedir = "log/"


kpt = tf.train.latest_checkpoint(savedir)
if kpt != None:
    sever.restore(sess, kpt)


batch_name, batch_x, batch_y = sess.run(readtf.get_train_data(verfiles, 8686))
batch_x = np.reshape(batch_x, newshape=[-1, 512])
p, percent = sess.run((pre, y_conv), feed_dict={x:batch_x, keep_prob:1})

with open('batch_class.txt', 'w') as file:
    sum = 0
    avg = 0
    mn = 50
    mx = 0
    num = 0
    for i in range(len(p)):
        now = percent[i][p[i]]
        if now <= 10:
            num += 1
        sum += now
        if mn >= now:
            mn = now
        if mx <= now:
            mx = now
        print(now)
        file.writelines(str(percent[i][p[i]]))
    avg = sum / 8686
    print("avg: %g" % avg)
    print("max: %g" % mx)
    print("min: %g" % mn)
    print("xiaoyu 10's num: %d" % num)
